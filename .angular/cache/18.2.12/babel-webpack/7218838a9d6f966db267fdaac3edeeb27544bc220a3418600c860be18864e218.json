{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Omar/Desktop/ORION/orion/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _AuthService;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(afAuth,\n  // Servicio de autenticación de Firebase\n  firestore, router // Servicio de enrutamiento de Angular\n  ) {\n    this.afAuth = afAuth;\n    this.firestore = firestore;\n    this.router = router;\n    // Monitorear el estado de autenticación del usuario\n    this.afAuth.authState.subscribe(user => {\n      if (user) {\n        this.userData = user; // Asignar datos del usuario si está logueado\n        localStorage.setItem('user', JSON.stringify(this.userData)); // Guardar datos en localStorage\n        console.log('service user (recordar borrar devs)', this.userData);\n      } else {\n        localStorage.removeItem('user'); // Limpiar datos si no hay usuario logueado\n      }\n    });\n  }\n  // Método para iniciar sesión con correo y contraseña\n  signIn(email, password) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield _this.afAuth.signInWithEmailAndPassword(email, password);\n        // Verifica que `result.user` no sea null antes de proceder\n        if (result.user) {\n          // Actualiza los datos del usuario en Firestore\n          yield _this.updateUserData(result.user);\n          // Intenta obtener los datos del usuario desde Firestore\n          const userDoc = yield _this.firestore.collection('users').doc(result.user.uid).get().toPromise();\n          console.log('service userDoc sign: ', userDoc);\n          // Verifica si `userDoc` existe\n          if (userDoc && userDoc.exists) {\n            _this.userData = userDoc.data(); // Asigna los datos actualizados\n            localStorage.setItem('user', JSON.stringify(_this.userData)); // Guarda en localStorage\n          } else {\n            console.warn('El documento del usuario no existe en Firestore.');\n          }\n          // También guarda los datos básicos del usuario de Firebase\n          _this.userData = result.user;\n          localStorage.setItem('user', JSON.stringify(_this.userData));\n        } else {\n          throw new Error('No se pudo obtener el usuario después de iniciar sesión.');\n        }\n      } catch (error) {\n        throw error; // Propaga el error para que el componente lo maneje\n      }\n    })();\n  }\n  updateUserData(user) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const userRef = _this2.firestore.collection('users').doc(user.uid);\n      const data = {\n        email: user.email,\n        displayName: user.displayName || 'Usuario',\n        lvl_1_best_score: 0,\n        lvl_1_best_time: 0,\n        lvl_2_best_score: 0,\n        lvl_2_best_time: 0,\n        lvl_3_best_score: 0,\n        lvl_3_best_time: 0,\n        hemetita: 0 // hemetita (int) \n      }; // Usamos { merge: true } para combinar los datos sin sobrescribir los existentes (Solo actualiza si no existen) \n      return userRef.set(data, {\n        merge: true\n      });\n    })();\n  }\n  // Método para cerrar sesión\n  signOut() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield _this3.afAuth.signOut(); // Cerrar sesión en Firebase\n      localStorage.removeItem('user'); // Limpiar localStorage\n      _this3.router.navigate(['login']); // Redirigir al login\n    })();\n  }\n  // Getter para comprobar si el usuario está logueado\n  get isLoggedIn() {\n    const user = localStorage.getItem('user'); // Comprobar si hay datos del usuario en localStorage\n    return user !== null; // Devolver true si existe, false en caso contrario\n  }\n}\n_AuthService = AuthService;\n_AuthService.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.Router));\n};\n_AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _AuthService,\n  factory: _AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthService","constructor","afAuth","firestore","router","authState","subscribe","user","userData","localStorage","setItem","JSON","stringify","console","log","removeItem","signIn","email","password","_this","_asyncToGenerator","result","signInWithEmailAndPassword","updateUserData","userDoc","collection","doc","uid","get","toPromise","exists","data","warn","Error","error","_this2","userRef","displayName","lvl_1_best_score","lvl_1_best_time","lvl_2_best_score","lvl_2_best_time","lvl_3_best_score","lvl_3_best_time","hemetita","set","merge","signOut","_this3","navigate","isLoggedIn","getItem","i0","ɵɵinject","i1","AngularFireAuth","i2","AngularFirestore","i3","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Omar\\Desktop\\ORION\\orion\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport { AngularFirestore } from '@angular/fire/compat/firestore'\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  userData: any; // Guarda los datos del usuario logueado\r\n\r\n  constructor(\r\n    private afAuth: AngularFireAuth, // Servicio de autenticación de Firebase\r\n    private firestore: AngularFirestore,\r\n    private router: Router // Servicio de enrutamiento de Angular\r\n  ) {\r\n    // Monitorear el estado de autenticación del usuario\r\n    this.afAuth.authState.subscribe((user) => {\r\n      if (user) {\r\n        this.userData = user; // Asignar datos del usuario si está logueado\r\n        localStorage.setItem('user', JSON.stringify(this.userData)); // Guardar datos en localStorage\r\n        console.log('service user (recordar borrar devs)', this.userData);\r\n      } else {\r\n        localStorage.removeItem('user'); // Limpiar datos si no hay usuario logueado\r\n      }\r\n    });\r\n  }\r\n\r\n    // Método para iniciar sesión con correo y contraseña\r\n    async signIn(email: string, password: string): Promise<void> {\r\n        try {\r\n        const result = await this.afAuth.signInWithEmailAndPassword(email, password);\r\n    \r\n        // Verifica que `result.user` no sea null antes de proceder\r\n        if (result.user) {\r\n            // Actualiza los datos del usuario en Firestore\r\n            await this.updateUserData(result.user);\r\n    \r\n            // Intenta obtener los datos del usuario desde Firestore\r\n            const userDoc = await this.firestore\r\n            .collection('users')\r\n            .doc(result.user.uid)\r\n            .get()\r\n            .toPromise();\r\n\r\n            console.log('service userDoc sign: ', userDoc);\r\n\r\n    \r\n            // Verifica si `userDoc` existe\r\n            if (userDoc && userDoc.exists) {\r\n            this.userData = userDoc.data(); // Asigna los datos actualizados\r\n            localStorage.setItem('user', JSON.stringify(this.userData)); // Guarda en localStorage\r\n            } else {\r\n            console.warn('El documento del usuario no existe en Firestore.');\r\n            }\r\n    \r\n            // También guarda los datos básicos del usuario de Firebase\r\n            this.userData = result.user;\r\n            localStorage.setItem('user', JSON.stringify(this.userData));\r\n        } else {\r\n            throw new Error('No se pudo obtener el usuario después de iniciar sesión.');\r\n        }\r\n        } catch (error) {\r\n        throw error; // Propaga el error para que el componente lo maneje\r\n        }\r\n    }\r\n  \r\n\r\n  async updateUserData(user: any) { \r\n    const userRef = this.firestore.collection('users').doc(user.uid); \r\n    const data = { \r\n        email: user.email, \r\n        displayName: user.displayName || 'Usuario', \r\n        lvl_1_best_score: 0, \r\n        lvl_1_best_time: 0, \r\n        lvl_2_best_score: 0, \r\n        lvl_2_best_time: 0, \r\n        lvl_3_best_score: 0, \r\n        lvl_3_best_time: 0, \r\n        hemetita: 0 // hemetita (int) \r\n        }; // Usamos { merge: true } para combinar los datos sin sobrescribir los existentes (Solo actualiza si no existen) \r\n        return userRef.set(data, { merge: true }); \r\n    }\r\n\r\n  // Método para cerrar sesión\r\n  async signOut(): Promise<void> {\r\n    await this.afAuth.signOut(); // Cerrar sesión en Firebase\r\n    localStorage.removeItem('user'); // Limpiar localStorage\r\n    this.router.navigate(['login']); // Redirigir al login\r\n  }\r\n\r\n  // Getter para comprobar si el usuario está logueado\r\n  get isLoggedIn(): boolean {\r\n    const user = localStorage.getItem('user'); // Comprobar si hay datos del usuario en localStorage\r\n    return user !== null; // Devolver true si existe, false en caso contrario\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}