{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Omar/Desktop/ORION/orion/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LoginPage = class LoginPage {\n  // Inyecta el AuthService y Router\n  constructor(authService, toastController, router // Agrega Router al constructor\n  ) {\n    this.authService = authService;\n    this.toastController = toastController;\n    this.router = router;\n    this.email = '';\n    this.password = '';\n    this.passwordFieldType = 'password';\n    this.passwordToggleIcon = 'eye-off';\n  }\n  onSubmit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.email || !_this.password) {\n        _this.presentToast('Por favor, complete ambos campos.', 'danger');\n        return;\n      }\n      try {\n        yield _this.authService.signIn(_this.email, _this.password);\n        _this.presentToast('¡Inicio de sesión exitoso!', 'success');\n        // Redirige a la página de inicio después del login exitoso\n        _this.router.navigate(['/inicio']); // Usa router para redirigir\n        // Limpiar campos de formulario\n        _this.email = '';\n        _this.password = '';\n      } catch (error) {\n        _this.presentToast('Error al iniciar sesión: ' + error.message, 'danger');\n      }\n    })();\n  }\n  togglePasswordVisibility() {\n    this.passwordFieldType = this.passwordFieldType === 'password' ? 'text' : 'password';\n    this.passwordToggleIcon = this.passwordToggleIcon === 'eye-off' ? 'eye' : 'eye-off';\n  }\n  presentToast(message, color) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const toast = yield _this2.toastController.create({\n        message,\n        color,\n        duration: 2000,\n        position: 'top'\n      });\n      yield toast.present();\n    })();\n  }\n};\nLoginPage = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss']\n})], LoginPage);\nexport { LoginPage };","map":{"version":3,"names":["Component","LoginPage","constructor","authService","toastController","router","email","password","passwordFieldType","passwordToggleIcon","onSubmit","_this","_asyncToGenerator","presentToast","signIn","navigate","error","message","togglePasswordVisibility","color","_this2","toast","create","duration","position","present","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Omar\\Desktop\\ORION\\orion\\src\\app\\login\\login.page.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { ToastController } from '@ionic/angular';\r\nimport { Router } from '@angular/router';  // Importa el Router\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.page.html',\r\n  styleUrls: ['./login.page.scss'],\r\n})\r\nexport class LoginPage {\r\n  email: string = '';\r\n  password: string = '';\r\n  passwordFieldType: string = 'password'; \r\n  passwordToggleIcon: string = 'eye-off';\r\n\r\n  // Inyecta el AuthService y Router\r\n  constructor(\r\n    public authService: AuthService,\r\n    public toastController: ToastController,\r\n    private router: Router  // Agrega Router al constructor\r\n  ) {}\r\n\r\n  async onSubmit() {\r\n    if (!this.email || !this.password) {\r\n      this.presentToast('Por favor, complete ambos campos.', 'danger');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.authService.signIn(this.email, this.password);\r\n      this.presentToast('¡Inicio de sesión exitoso!', 'success');\r\n      \r\n      // Redirige a la página de inicio después del login exitoso\r\n      this.router.navigate(['/inicio']);  // Usa router para redirigir\r\n\r\n      // Limpiar campos de formulario\r\n      this.email = '';\r\n      this.password = '';\r\n    } catch (error: any) {\r\n      this.presentToast('Error al iniciar sesión: ' + error.message, 'danger');\r\n    }\r\n  }\r\n\r\n  togglePasswordVisibility() { \r\n    this.passwordFieldType = this.passwordFieldType === 'password' ? 'text' : 'password';\r\n    this.passwordToggleIcon = this.passwordToggleIcon === 'eye-off' ? 'eye' : 'eye-off';\r\n  }\r\n\r\n  async presentToast(message: string, color: string) {\r\n    const toast = await this.toastController.create({\r\n      message,\r\n      color,\r\n      duration: 2000,\r\n      position: 'top'\r\n    });\r\n    await toast.present();\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,IAAMC,SAAS,GAAf,MAAMA,SAAS;EAMpB;EACAC,YACSC,WAAwB,EACxBC,eAAgC,EAC/BC,MAAc,CAAE;EAAA,E;IAFjB,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,eAAe,GAAfA,eAAe;IACd,KAAAC,MAAM,GAANA,MAAM;IAThB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,iBAAiB,GAAW,UAAU;IACtC,KAAAC,kBAAkB,GAAW,SAAS;EAOnC;EAEGC,QAAQA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACZ,IAAI,CAACD,KAAI,CAACL,KAAK,IAAI,CAACK,KAAI,CAACJ,QAAQ,EAAE;QACjCI,KAAI,CAACE,YAAY,CAAC,mCAAmC,EAAE,QAAQ,CAAC;QAChE;MACF;MAEA,IAAI;QACF,MAAMF,KAAI,CAACR,WAAW,CAACW,MAAM,CAACH,KAAI,CAACL,KAAK,EAAEK,KAAI,CAACJ,QAAQ,CAAC;QACxDI,KAAI,CAACE,YAAY,CAAC,4BAA4B,EAAE,SAAS,CAAC;QAE1D;QACAF,KAAI,CAACN,MAAM,CAACU,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAE;QAEpC;QACAJ,KAAI,CAACL,KAAK,GAAG,EAAE;QACfK,KAAI,CAACJ,QAAQ,GAAG,EAAE;MACpB,CAAC,CAAC,OAAOS,KAAU,EAAE;QACnBL,KAAI,CAACE,YAAY,CAAC,2BAA2B,GAAGG,KAAK,CAACC,OAAO,EAAE,QAAQ,CAAC;MAC1E;IAAC;EACH;EAEAC,wBAAwBA,CAAA;IACtB,IAAI,CAACV,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,KAAK,UAAU,GAAG,MAAM,GAAG,UAAU;IACpF,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,KAAK,SAAS,GAAG,KAAK,GAAG,SAAS;EACrF;EAEMI,YAAYA,CAACI,OAAe,EAAEE,KAAa;IAAA,IAAAC,MAAA;IAAA,OAAAR,iBAAA;MAC/C,MAAMS,KAAK,SAASD,MAAI,CAAChB,eAAe,CAACkB,MAAM,CAAC;QAC9CL,OAAO;QACPE,KAAK;QACLI,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE;OACX,CAAC;MACF,MAAMH,KAAK,CAACI,OAAO,EAAE;IAAC;EACxB;CACD;AAhDYxB,SAAS,GAAAyB,UAAA,EALrB1B,SAAS,CAAC;EACT2B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,mBAAmB;EAChCC,SAAS,EAAE,CAAC,mBAAmB;CAChC,CAAC,C,EACW5B,SAAS,CAgDrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}