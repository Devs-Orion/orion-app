{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Omar/Desktop/ORION/orion/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _AuthService;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(afAuth,\n  // Servicio de autenticación de Firebase\n  firestore, router // Servicio de enrutamiento de Angular\n  ) {\n    this.afAuth = afAuth;\n    this.firestore = firestore;\n    this.router = router;\n    // Monitorear el estado de autenticación del usuario\n    this.afAuth.authState.subscribe(user => {\n      if (user) {\n        // Guarda los datos básicos del usuario en `user`\n        this.userData = user;\n        localStorage.setItem('user', JSON.stringify(this.userData));\n        console.log('Datos básicos del usuario: ', this.userData);\n        // Intenta obtener datos adicionales del usuario desde Firestore\n        this.loadUserStats(user.uid);\n      } else {\n        // Limpiar datos si no hay usuario logueado\n        localStorage.removeItem('user');\n        localStorage.removeItem('userStats');\n      }\n    });\n  }\n  // Método para cargar los datos adicionales del usuario desde Firestore\n  loadUserStats(uid) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const userDoc = yield _this.firestore.collection('users').doc(uid).get().toPromise();\n        if (userDoc && userDoc.exists) {\n          const userStats = userDoc.data();\n          localStorage.setItem('userStats', JSON.stringify(userStats));\n          console.log('Datos adicionales del usuario cargados: ', userStats);\n        } else {\n          console.warn('El documento del usuario no existe en Firestore.');\n        }\n      } catch (error) {\n        console.error('Error al cargar los datos adicionales del usuario desde Firestore: ', error);\n      }\n    })();\n  }\n  // Método para iniciar sesión con correo y contraseña\n  signIn(email, password) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield _this2.afAuth.signInWithEmailAndPassword(email, password);\n        // Verifica que `result.user` no sea null antes de proceder\n        if (result.user) {\n          // Actualiza los datos del usuario en Firestore\n          yield _this2.updateUserData(result.user);\n          // Carga los datos adicionales del usuario desde Firestore\n          yield _this2.loadUserStats(result.user.uid);\n          // También guarda los datos básicos del usuario de Firebase\n          _this2.userData = result.user;\n          localStorage.setItem('user', JSON.stringify(_this2.userData));\n          console.log('Inicio de sesión exitoso. Datos básicos y adicionales cargados.');\n        } else {\n          throw new Error('No se pudo obtener el usuario después de iniciar sesión.');\n        }\n      } catch (error) {\n        console.error('Error en signIn: ', error);\n        throw error; // Propaga el error para que el componente lo maneje\n      }\n    })();\n  }\n  updateUserData(user) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const userRef = _this3.firestore.collection('users').doc(user.uid);\n      const data = {\n        email: user.email,\n        displayName: user.displayName || 'Usuario',\n        lvl_1_best_score: 0,\n        lvl_1_best_time: 0,\n        lvl_2_best_score: 0,\n        lvl_2_best_time: 0,\n        lvl_3_best_score: 0,\n        lvl_3_best_time: 0,\n        hemetita: 0 // hemetita (int) \n      }; // Usamos { merge: true } para combinar los datos sin sobrescribir los existentes (Solo actualiza si no existen) \n      return userRef.set(data, {\n        merge: true\n      });\n    })();\n  }\n  // Método para cerrar sesión\n  signOut() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4.afAuth.signOut(); // Cerrar sesión en Firebase\n      localStorage.removeItem('user'); // Limpiar localStorage\n      _this4.router.navigate(['login']); // Redirigir al login\n    })();\n  }\n  // Getter para comprobar si el usuario está logueado\n  get isLoggedIn() {\n    const user = localStorage.getItem('user'); // Comprobar si hay datos del usuario en localStorage\n    return user !== null; // Devolver true si existe, false en caso contrario\n  }\n}\n_AuthService = AuthService;\n_AuthService.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.Router));\n};\n_AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _AuthService,\n  factory: _AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthService","constructor","afAuth","firestore","router","authState","subscribe","user","userData","localStorage","setItem","JSON","stringify","console","log","loadUserStats","uid","removeItem","_this","_asyncToGenerator","userDoc","collection","doc","get","toPromise","exists","userStats","data","warn","error","signIn","email","password","_this2","result","signInWithEmailAndPassword","updateUserData","Error","_this3","userRef","displayName","lvl_1_best_score","lvl_1_best_time","lvl_2_best_score","lvl_2_best_time","lvl_3_best_score","lvl_3_best_time","hemetita","set","merge","signOut","_this4","navigate","isLoggedIn","getItem","i0","ɵɵinject","i1","AngularFireAuth","i2","AngularFirestore","i3","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Omar\\Desktop\\ORION\\orion\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport { AngularFirestore } from '@angular/fire/compat/firestore'\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  userData: any; // Guarda los datos del usuario logueado\r\n\r\n  constructor(\r\n    private afAuth: AngularFireAuth, // Servicio de autenticación de Firebase\r\n    private firestore: AngularFirestore,\r\n    private router: Router // Servicio de enrutamiento de Angular\r\n  ) {\r\n    // Monitorear el estado de autenticación del usuario\r\n    this.afAuth.authState.subscribe((user) => {\r\n      if (user) {\r\n        // Guarda los datos básicos del usuario en `user`\r\n        this.userData = user;\r\n        localStorage.setItem('user', JSON.stringify(this.userData)); \r\n        console.log('Datos básicos del usuario: ', this.userData);\r\n  \r\n        // Intenta obtener datos adicionales del usuario desde Firestore\r\n        this.loadUserStats(user.uid);\r\n      } else {\r\n        // Limpiar datos si no hay usuario logueado\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('userStats');\r\n      }\r\n    });\r\n  }\r\n\r\n// Método para cargar los datos adicionales del usuario desde Firestore\r\nprivate async loadUserStats(uid: string): Promise<void> {\r\n    try {\r\n      const userDoc = await this.firestore.collection('users').doc(uid).get().toPromise();\r\n  \r\n      if (userDoc && userDoc.exists) {\r\n        const userStats = userDoc.data();\r\n        localStorage.setItem('userStats', JSON.stringify(userStats));\r\n        console.log('Datos adicionales del usuario cargados: ', userStats);\r\n      } else {\r\n        console.warn('El documento del usuario no existe en Firestore.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al cargar los datos adicionales del usuario desde Firestore: ', error);\r\n    }\r\n  }\r\n  \r\n\r\n// Método para iniciar sesión con correo y contraseña\r\nasync signIn(email: string, password: string): Promise<void> {\r\n    try {\r\n      const result = await this.afAuth.signInWithEmailAndPassword(email, password);\r\n  \r\n      // Verifica que `result.user` no sea null antes de proceder\r\n      if (result.user) {\r\n        // Actualiza los datos del usuario en Firestore\r\n        await this.updateUserData(result.user);\r\n  \r\n        // Carga los datos adicionales del usuario desde Firestore\r\n        await this.loadUserStats(result.user.uid);\r\n  \r\n        // También guarda los datos básicos del usuario de Firebase\r\n        this.userData = result.user;\r\n        localStorage.setItem('user', JSON.stringify(this.userData));\r\n        console.log('Inicio de sesión exitoso. Datos básicos y adicionales cargados.');\r\n      } else {\r\n        throw new Error('No se pudo obtener el usuario después de iniciar sesión.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error en signIn: ', error);\r\n      throw error; // Propaga el error para que el componente lo maneje\r\n    }\r\n  }\r\n  \r\n\r\n  async updateUserData(user: any) { \r\n    const userRef = this.firestore.collection('users').doc(user.uid); \r\n    const data = { \r\n        email: user.email, \r\n        displayName: user.displayName || 'Usuario', \r\n        lvl_1_best_score: 0, \r\n        lvl_1_best_time: 0, \r\n        lvl_2_best_score: 0, \r\n        lvl_2_best_time: 0, \r\n        lvl_3_best_score: 0, \r\n        lvl_3_best_time: 0, \r\n        hemetita: 0 // hemetita (int) \r\n        }; // Usamos { merge: true } para combinar los datos sin sobrescribir los existentes (Solo actualiza si no existen) \r\n        return userRef.set(data, { merge: true }); \r\n    }\r\n\r\n  // Método para cerrar sesión\r\n  async signOut(): Promise<void> {\r\n    await this.afAuth.signOut(); // Cerrar sesión en Firebase\r\n    localStorage.removeItem('user'); // Limpiar localStorage\r\n    this.router.navigate(['login']); // Redirigir al login\r\n  }\r\n\r\n  // Getter para comprobar si el usuario está logueado\r\n  get isLoggedIn(): boolean {\r\n    const user = localStorage.getItem('user'); // Comprobar si hay datos del usuario en localStorage\r\n    return user !== null; // Devolver true si existe, false en caso contrario\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}